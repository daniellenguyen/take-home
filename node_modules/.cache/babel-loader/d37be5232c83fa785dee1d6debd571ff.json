{"ast":null,"code":"let shelfIdCounter = 0;\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'createShelf':\n      const id = `shelf-${shelfIdCounter}`;\n      shelfIdCounter++;\n      return { ...state,\n        [id]: {\n          id,\n          name: action.name,\n          records: []\n        }\n      };\n\n    case 'deleteShelf':\n      return Object.entries(state).reduce((newState, [id, value]) => {\n        if (id !== action.id) {\n          newState[id] = value;\n        }\n\n        return newState;\n      }, {});\n\n    case 'renameShelf':\n      return { ...state,\n        [action.id]: { ...state[action.id],\n          name: action.name\n        }\n      };\n\n    case 'addRecordToShelf':\n      return { ...state,\n        [action.shelfId]: { ...state[action.shelfId],\n          records: state[action.shelfId].records.concat(action.recordId)\n        }\n      };\n\n    case 'removeRecordFromShelf':\n      return { ...state,\n        [action.shelfId]: { ...state[action.shelfId],\n          records: state[action.shelfId].records.filter(id => id !== action.recordId)\n        }\n      };\n\n    case 'reorderInShelf':\n      const newOrder = [...state[action.shelfId].records];\n      const [record] = newOrder.splice(action.oldIndex, 1);\n      newOrder.splice(action.newIndex, 0, record);\n      return { ...state,\n        [action.shelfId]: { ...state[action.shelfId],\n          records: newOrder\n        }\n      };\n\n    case 'moveBetweenShelves':\n      const newShelf = [...state[action.newShelf].records];\n      newShelf.splice(action.newIndex, 0, state[action.oldShelf].records[action.oldIndex]);\n      return { ...state,\n        [action.oldShelf]: { ...state[action.oldShelf],\n          records: state[action.oldShelf].records.filter((record, index) => index !== action.oldIndex)\n        },\n        [action.newShelf]: { ...state[action.newShelf],\n          records: newShelf\n        }\n      };\n\n    default:\n      throw new Error();\n  }\n};","map":{"version":3,"sources":["/Users/daniellenguyen/take-home/src/reducer.js"],"names":["shelfIdCounter","reducer","state","action","type","id","name","records","Object","entries","reduce","newState","value","shelfId","concat","recordId","filter","newOrder","record","splice","oldIndex","newIndex","newShelf","oldShelf","index","Error"],"mappings":"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","sourcesContent":["let shelfIdCounter = 0;\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'createShelf':\n      const id = `shelf-${shelfIdCounter}`;\n      shelfIdCounter++;\n      return {\n        ...state,\n        [id]: {\n          id,\n          name: action.name,\n          records: [],\n        },\n      };\n    case 'deleteShelf':\n      return Object.entries(state).reduce((newState, [id, value]) => {\n        if (id !== action.id) {\n          newState[id] = value;\n        }\n        return newState;\n      }, {});\n    case 'renameShelf':\n      return {\n        ...state,\n        [action.id]: {\n          ...state[action.id],\n          name: action.name,\n        },\n      };\n    case 'addRecordToShelf':\n      return {\n        ...state,\n        [action.shelfId]: {\n          ...state[action.shelfId],\n          records: state[action.shelfId].records.concat(action.recordId),\n        },\n      };\n    case 'removeRecordFromShelf':\n      return {\n        ...state,\n        [action.shelfId]: {\n          ...state[action.shelfId],\n          records: state[action.shelfId].records.filter(\n            id => id !== action.recordId,\n          ),\n        },\n      };\n    case 'reorderInShelf':\n      const newOrder = [...state[action.shelfId].records];\n      const [record] = newOrder.splice(action.oldIndex, 1);\n      newOrder.splice(action.newIndex, 0, record);\n      return {\n        ...state,\n        [action.shelfId]: {\n          ...state[action.shelfId],\n          records: newOrder,\n        },\n      };\n    case 'moveBetweenShelves':\n      const newShelf = [...state[action.newShelf].records];\n      newShelf.splice(\n        action.newIndex,\n        0,\n        state[action.oldShelf].records[action.oldIndex],\n      );\n\n      return {\n        ...state,\n        [action.oldShelf]: {\n          ...state[action.oldShelf],\n          records: state[action.oldShelf].records.filter(\n            (record, index) => index !== action.oldIndex,\n          ),\n        },\n        [action.newShelf]: {\n          ...state[action.newShelf],\n          records: newShelf,\n        },\n      };\n    default:\n      throw new Error();\n  }\n};\n"]},"metadata":{},"sourceType":"module"}